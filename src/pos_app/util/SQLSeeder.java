/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package pos_app.util;

import java.sql.*;

/**
 * SQLSeeder d√πng ƒë·ªÉ kh·ªüi t·∫°o l·∫°i c∆° s·ªü d·ªØ li·ªáu t·ª´ file SQL.
 *
 * T√≠nh nƒÉng: - Xo√° to√†n b·ªô b·∫£ng hi·ªán c√≥ (DROP TABLE IF EXISTS) - ƒê·ªçc v√† ch·∫°y
 * l·ªánh SQL t·ª´ file `.sql` d√≤ng theo d√≤ng
 *
 * D√πng cho m·ª•c ƒë√≠ch ph√°t tri·ªÉn, testing ho·∫∑c kh·ªüi t·∫°o h·ªá th·ªëng POS t·ª´ ƒë·∫ßu.
 *
 * V√≠ d·ª• s·ª≠ d·ª•ng:
 * <pre>
 *     SQLSeeder.run("src/resources/db/seed.sql");
 * </pre>
 *
 * ‚ö†Ô∏è C·∫¢NH B√ÅO: Ph∆∞∆°ng th·ª©c n√†y s·∫Ω xo√° to√†n b·ªô d·ªØ li·ªáu hi·ªán c√≥ trong database.
 *
 * @author 04dkh
 */
public class SQLSeeder {

    /**
     * Ch·∫°y seeder t·ª´ file SQL ch·ªâ ƒë·ªãnh. T·ª± ƒë·ªông xo√° h·∫øt b·∫£ng hi·ªán c√≥ v√† t·∫°o m·ªõi
     * theo n·ªôi dung file.
     *
     * @param sqlFilePath ƒë∆∞·ªùng d·∫´n ƒë·∫øn file SQL
     */
    public static void run(String sqlFilePath) {
        try (Connection conn = DatabaseConnection.getConnection()) {
            dropAllTables(conn); // üí£ Xo√° to√†n b·ªô b·∫£ng hi·ªán t·∫°i
            runSQLFromFile(conn, sqlFilePath);
            System.out.println("‚úÖ ƒê√£ ch·∫°y file SQL seed th√†nh c√¥ng!");
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ch·∫°y file SQL seed:");
            e.printStackTrace();
        }
    }

    /**
     * Xo√° to√†n b·ªô b·∫£ng trong c∆° s·ªü d·ªØ li·ªáu hi·ªán t·∫°i.
     *
     * @param conn k·∫øt n·ªëi SQL ƒëang s·ª≠ d·ª•ng
     * @throws SQLException n·∫øu c√≥ l·ªói x·∫£y ra khi th·ª±c thi c√¢u l·ªánh SQL
     */
    private static void dropAllTables(Connection conn) throws SQLException {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SHOW TABLES");

        java.util.List<String> tables = new java.util.ArrayList<>();
        while (rs.next()) {
            tables.add(rs.getString(1));
        }
        rs.close(); // ƒë√≥ng ResultSet tr∆∞·ªõc khi ti·∫øp t·ª•c

        stmt.execute("SET FOREIGN_KEY_CHECKS = 0");
        for (String table : tables) {
            stmt.executeUpdate("DROP TABLE IF EXISTS `" + table + "`");
        }
        stmt.execute("SET FOREIGN_KEY_CHECKS = 1");
        stmt.close();

        System.out.println("üóëÔ∏è ƒê√£ xo√° to√†n b·ªô b·∫£ng");
    }

    /**
     * ƒê·ªçc n·ªôi dung t·ª´ file SQL v√† th·ª±c thi t·ª´ng l·ªánh (c√°c d√≤ng k·∫øt th√∫c b·∫±ng
     * ;).
     *
     * @param conn k·∫øt n·ªëi SQL ƒëang d√πng
     * @param sqlFilePath ƒë∆∞·ªùng d·∫´n ƒë·∫øn file ch·ª©a l·ªánh SQL
     * @throws Exception n·∫øu c√≥ l·ªói khi ƒë·ªçc ho·∫∑c ch·∫°y c√¢u l·ªánh
     */
    private static void runSQLFromFile(Connection conn, String sqlFilePath) throws Exception {
        try (
                Statement stmt = conn.createStatement(); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(sqlFilePath))) {
            StringBuilder sqlBuilder = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.startsWith("--") || line.isEmpty()) {
                    continue; // b·ªè qua d√≤ng comment v√† d√≤ng tr·ªëng
                }
                sqlBuilder.append(line);
                if (line.endsWith(";")) {
                    String sql = sqlBuilder.toString();
                    sql = sql.substring(0, sql.length() - 1); // xo√° d·∫•u ;
                    stmt.execute(sql);
                    sqlBuilder.setLength(0);
                }
            }
        }
    }
}
